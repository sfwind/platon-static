/*++----------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. 项目名称：platon-static
2. 文件名：src -> utils -> apiDataFilter.js
3. 作者：liyang@iquanwai.com
4. 备注：请求api接口获取数据
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------++*/

/*++-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
加载相关资源
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------++*/
import axios from "axios" ;
import apiConf from "../configs/api" ;
import { startLoad, endLoad, alertMsg, set } from 'reduxutil/actions';
/*++-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
apiDataFilter的定义
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------++*/
let apiDataFilter =  {
  /*++-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
  请求数据 , successCallback的唯一参数为：response，返回的json数据应该这样取得：response.body
  @method : get | post | jsonp
  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------++*/
  request({ apiPath , data = {} , method = "get" , contentType , jsonp = "callback" ,path = false, successCallback ,otherCallback, errorCallback}) {
    let apiUrl = this.pathToUrl(apiPath) ;
    method =  method.toLowerCase() ;
    let opts = {
      "timeout" : apiConf.timeout ,
      "headers" : {
        "platform" : 'we_mobile'
      }
    } ;
    /*++-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    如果启用jsonp模式，而且如果设置了jsonp参数
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------++*/
    if(method === "post")  {
      if(contentType) opts.headers["content-type"] = contentType ;
    }
    else if(  method === "jsonp" ||  method === "get" ) {
      path ? (apiUrl = apiUrl+this.dataToPath(data)):(opts.params = data);
      if( method === "jsonp" && jsonp !== "" && jsonp !== undefined ) opts.jsonp = jsonp ;
    }
    /*++-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    不是生产环境在控制台输出请求log
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------++*/
    if(this.getEnv() !== "prod") {
      console.log("http请求(" + apiUrl + ")后端接口数据("+method+")：" + JSON.stringify(data)) ;
    }
    /*++-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    发起请求
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------++*/
    errorCallback = errorCallback || this.errorCallback ;
    if (method === "post") {
      axios[method](apiUrl, data, opts).then((res) => {
        if (res.status === 700) {  // 登录特殊情况的重定向
          window.location.href = decodeURI(`${window.location.protocol}//${window.location.host}/wx/oauth/auth?callbackUrl=${window.location.href}`);
        }
        if (parseInt(res.data.code, 10) === apiConf.successStatusCode) {successCallback(res.data)}
        else if(parseInt(res.data.code, 10) === apiConf.errStatusCode) alertMsg(data.msg); // 请求返回错误的统一处理
        else { otherCallback(res.data);}
      }, errorCallback);
    }
    else if(  method === "jsonp" ||  method === "get" ) {
      axios[method](apiUrl , opts ).then( (res) => {
        if( parseInt(res.data.code , 10) === apiConf.successStatusCode) successCallback(res.data) ;
        else if(parseInt(res.data.code, 10) === apiConf.errStatusCode) alertMsg(data.msg);
        else { otherCallback(res.data) ; }
      } , errorCallback) ;
    }
  } ,
  /*++-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
  通过域名来获取当前阶段环境
  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------++*/
  getEnv() {
    let env = "dev" ;
    let domain = document.domain ;
    switch (domain) {
      case "m.test.com" : //测试环境
        env = "test" ;
        break ;
      case "m.sim.com" :  //仿真环境
        env = "sim" ;
        break ;
      case "m.**.com" :  //线上环境
        env = "prod" ;
        break ;
      default :
        env = "test" ;
        break ;
    }
    return env ;
  } ,
  /*++-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
  请求错误处理方法
  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------++*/
  errorCallback(res,arg) {
    console.log("API error"+res) ;
  } ,
  /*++-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
  根据apiPath返回apiUrl
  @apiPath：从api配置中suffix往下层写如："example.common.detail"
  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------++*/
  pathToUrl(apiPath) {
    let pathArray = apiPath.split(".") ;
    let prefix = apiConf.prefix[this.getEnv()] ;
    let suffix = apiConf.suffix ;
    for(let n = 0 ; n < pathArray.length ; n ++) {
      suffix = suffix[pathArray[n]] ;
    }
    if(suffix === undefined) suffix = "" ;
    return prefix + suffix ;
  },
  /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
  通过path传参的参数处理
  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
  dataToPath(data) {
    if (data.constructor != Object) return;
    let pathName = [];
    let i = 0;
    let pathString = '';
    for ( pathName[i++] in data){
      pathString +=`/${data[pathName[i-1]]}`
    }
    return pathString;
  }
  /*++-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 整个工具定义结束
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------++*/
};

export default apiDataFilter ;
